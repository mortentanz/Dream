using System;
using System.Collections.Generic;
using System.Text;
using System.Xml.Serialization;

namespace Dream.Data.Demographics
{
  /// <summary>
  /// Container for characterization and definition of an inference based forecast component.
  /// </summary>
  public abstract class EstimationInfo : SeriesInfo
  {
    #region Fields
    protected EstimationType type;
    protected Series sampleseries = null;
    #endregion

    #region Constructors
    /// <summary>
    /// Default constructor used for deserialization.
    /// </summary>
    protected EstimationInfo() : base() {}

    /// <summary>
    /// Constructor.
    /// </summary>
    /// <param name="type">The type of content stored in the estimation.</param>
    protected EstimationInfo(EstimationType type)
      : base()
    {
      this.type = type;
    }

    /// <summary>
    /// Copy constructor.
    /// </summary>
    /// <param name="info">The EstimationInfo to copy.</param>
    protected EstimationInfo(EstimationInfo info)
      : base(info)
    {
      this.type = info.type;
      this.sampleseries = info.sampleseries.Copy();
    }
    #endregion

    #region Properties
    /// <summary>
    /// The estimation class identification used in the database.
    /// </summary>
    [XmlIgnore]
    public string Class
    {
      get { return type.ToString(); }
    }

    /// <summary>
    /// The series of years constituing the input sample for the estimation.
    /// </summary>
    public virtual Series Sample
    {
      get { return sampleseries; }
      set
      {
        if (sampleseries == null || !sampleseries.Equals(value))
        {
          if (sampleseries.EndYear > DateTime.Now.Year)
          {
            throw new ArgumentException("The SampleSeries should contain historic data but EndYear is after current year.");
          }
          if (!series.Continues(sampleseries))
          {
            throw new ArgumentException("The Series generated by the estimation should continue the SampleSeries.");
          }
          sampleseries = value;
          saved = false;
        }
      }
    }

    /// <summary>
    /// Validates the state integrity of the current ForecastInfo instance.
    /// </summary>
    /// <returns>True if the estimation is characterized and ready for being cataloged, false otherwise.</returns>
    public override bool Validate()
    {
      if(!base.Validate())
      {
        return false;
      }
      return (sampleseries != null && sampleseries.EndYear > DateTime.Now.Year && series.Continues(sampleseries));
    }

    /// <summary>
    /// States if the current state of the EstimationInfo has been saved to the database.
    /// </summary>
    public override bool Saved
    {
      get { return (sampleseries != null && sampleseries.Saved) && base.Saved; }
    }
    #endregion
  }
}
